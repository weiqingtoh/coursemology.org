
<span class="assist-title">Marking Assistant</span>
<span class="assist-hint" onclick="toggleMarkingAssistant()">
    Highlight keywords in your student's submission
</span>
<span class="assist-hide-option" onclick="toggleMarkingAssistant()" hidden>
    Hide Marking Assistant
</span>
<div class="assist-field" hidden>
    <input class="input-block-level" id="marking_assistant" type="text" placeholder="To highlight keywords, enter each word followed by the enter key. Only the first word will be taken and special charcters will be ignored.">
    <div id="marking-keywords"></div>
</div>

<% if @assessment.specific.respond_to? :single_question? and @assessment.specific.single_question? %>
    <%= render :partial => 'single_question_form', locals: {mode: "edit"} %>
<% else %>
    <%= render :partial => 'multiple_question_form', locals: {mode: "edit"} %>
<% end %>

<script>
    function suggestEXP(max, exp, sum) {

        var sum_grade = 0;
        if (typeof(sum) == 'undefined') {
            grade_input = $(".grade-input");

            grade_input.each(function(){
                sum_grade += $(this).val() - 0;
            });

        } else {
            sum_grade = $('#grade-sum').val() - 0;
        }

        multiplier = $("#exp-multiplier").val() - 0;
        multiplier = multiplier > 1 ? 1 : multiplier;

        total_grade = $("#grade-sum");


        var result = Math.round(Math.round(multiplier * (exp * sum_grade / max) / 5) * 5);
        $("#exp-sum").val(result);
        total_grade.val(Math.round(sum_grade * 100) / 100);
    }

    $(document).ready(function() {
        if ($("#exp-sum").val() == "")
            suggestEXP( <%= @assessment.max_grade %>, <%= @assessment.exp %> );
        var markingKeywords = []
        if ( 'markAssist' in $.cache ) {
            for ( var i = 0; i < $.cache[ 'markAssist' ].length; i++ ) {
                addTag( $.cache[ 'markAssist'][i] );
            };
            toggleMarkingAssistant();
        }
        //load cache for marking assistant
    });

    $( "#marking_assistant" ).keypress( function ( e ) {
        if ( e.keyCode == 13 ) {
            addTag( document.getElementById( "marking_assistant" ).value );
            document.getElementById( "marking_assistant" ).value = "";
        };  
    });

    function toggleMarkingAssistant() {
        $( ".assist-hint" ).toggle();
        $( ".assist-field" ).toggle();
        $( ".assist-hide-option" ).toggle();
    };

    function setTag( keyWord ) {
        return  "<span class='assist-tags' id='" + keyWord + "'>" 
                + "<span class='selected-word'>" + keyWord 
                + "</span>" + "<i class='icon-remove-sign icon-white' " 
                + "onClick='removeTag(this.id)' id='" + keyWord 
                + "'></i></span>"
    };

    function cleanWord( keyWord ) {
        keyWord = keyWord.match( /[a-z,A-Z]+/i );
        if ( keyWord.length == 0 ) {
            return "";
        } else {
            return escape( keyWord );    
        };
    };

    function addTag( keyWord ) {

        keyWord = cleanWord(keyWord);

        if ( 'markAssist' in $.cache ) {
            if ( !( $.inArray( keyWord, $.cache[ 'markAssist' ] ) ) ) {
                return
            } else {
                $.cache[ 'markAssist' ].push( keyWord );
            };
        } else {
            $.cache[ 'markAssist' ] = [ keyWord ];
        };

        // Change to adding a node using DOM
        $( "#marking-keywords" ).append( setTag( keyWord ) );

        $( ".submission-question-block" ).highlight( keyWord, { className: keyWord, element: "strong", wordsOnly: true } );
        // Implement colors
    };

    function removeTag( keyWord ) {
        $( "#" + keyWord ).remove();
        $( ".submission-question-block" ).unhighlight( { className: keyWord, element: "strong" } );
        $.cache[ 'markAssist' ].splice( $.cache[ 'markAssist' ].indexOf( keyWord ), 1 )
    };

</script>
